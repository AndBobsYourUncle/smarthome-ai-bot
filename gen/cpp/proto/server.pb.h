// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fserver_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fserver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_proto_2fserver_2eproto;
namespace smarthome_ai_bot_api {
namespace v1 {
class SendPromptRequest;
struct SendPromptRequestDefaultTypeInternal;
extern SendPromptRequestDefaultTypeInternal _SendPromptRequest_default_instance_;
class SendPromptResponse;
struct SendPromptResponseDefaultTypeInternal;
extern SendPromptResponseDefaultTypeInternal _SendPromptResponse_default_instance_;
}  // namespace v1
}  // namespace smarthome_ai_bot_api
PROTOBUF_NAMESPACE_OPEN
template <>
::smarthome_ai_bot_api::v1::SendPromptRequest* Arena::CreateMaybeMessage<::smarthome_ai_bot_api::v1::SendPromptRequest>(Arena*);
template <>
::smarthome_ai_bot_api::v1::SendPromptResponse* Arena::CreateMaybeMessage<::smarthome_ai_bot_api::v1::SendPromptResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace smarthome_ai_bot_api {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SendPromptRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smarthome_ai_bot_api.v1.SendPromptRequest) */ {
 public:
  inline SendPromptRequest() : SendPromptRequest(nullptr) {}
  ~SendPromptRequest() override;
  explicit PROTOBUF_CONSTEXPR SendPromptRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPromptRequest(const SendPromptRequest& from);
  SendPromptRequest(SendPromptRequest&& from) noexcept
    : SendPromptRequest() {
    *this = ::std::move(from);
  }

  inline SendPromptRequest& operator=(const SendPromptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPromptRequest& operator=(SendPromptRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPromptRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPromptRequest* internal_default_instance() {
    return reinterpret_cast<const SendPromptRequest*>(
               &_SendPromptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendPromptRequest& a, SendPromptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPromptRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPromptRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPromptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPromptRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPromptRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPromptRequest& from) {
    SendPromptRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPromptRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "smarthome_ai_bot_api.v1.SendPromptRequest";
  }
  protected:
  explicit SendPromptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPromptFieldNumber = 1,
  };
  // string prompt = 1 [json_name = "prompt"];
  void clear_prompt() ;
  const std::string& prompt() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prompt(Arg_&& arg, Args_... args);
  std::string* mutable_prompt();
  PROTOBUF_NODISCARD std::string* release_prompt();
  void set_allocated_prompt(std::string* ptr);

  private:
  const std::string& _internal_prompt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt(
      const std::string& value);
  std::string* _internal_mutable_prompt();

  public:
  // @@protoc_insertion_point(class_scope:smarthome_ai_bot_api.v1.SendPromptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prompt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};// -------------------------------------------------------------------

class SendPromptResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smarthome_ai_bot_api.v1.SendPromptResponse) */ {
 public:
  inline SendPromptResponse() : SendPromptResponse(nullptr) {}
  ~SendPromptResponse() override;
  explicit PROTOBUF_CONSTEXPR SendPromptResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPromptResponse(const SendPromptResponse& from);
  SendPromptResponse(SendPromptResponse&& from) noexcept
    : SendPromptResponse() {
    *this = ::std::move(from);
  }

  inline SendPromptResponse& operator=(const SendPromptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPromptResponse& operator=(SendPromptResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPromptResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPromptResponse* internal_default_instance() {
    return reinterpret_cast<const SendPromptResponse*>(
               &_SendPromptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendPromptResponse& a, SendPromptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPromptResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPromptResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPromptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPromptResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPromptResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendPromptResponse& from) {
    SendPromptResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPromptResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "smarthome_ai_bot_api.v1.SendPromptResponse";
  }
  protected:
  explicit SendPromptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1 [json_name = "response"];
  void clear_response() ;
  const std::string& response() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response(Arg_&& arg, Args_... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* ptr);

  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(
      const std::string& value);
  std::string* _internal_mutable_response();

  public:
  // @@protoc_insertion_point(class_scope:smarthome_ai_bot_api.v1.SendPromptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fserver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SendPromptRequest

// string prompt = 1 [json_name = "prompt"];
inline void SendPromptRequest::clear_prompt() {
  _impl_.prompt_.ClearToEmpty();
}
inline const std::string& SendPromptRequest::prompt() const {
  // @@protoc_insertion_point(field_get:smarthome_ai_bot_api.v1.SendPromptRequest.prompt)
  return _internal_prompt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendPromptRequest::set_prompt(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.prompt_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:smarthome_ai_bot_api.v1.SendPromptRequest.prompt)
}
inline std::string* SendPromptRequest::mutable_prompt() {
  std::string* _s = _internal_mutable_prompt();
  // @@protoc_insertion_point(field_mutable:smarthome_ai_bot_api.v1.SendPromptRequest.prompt)
  return _s;
}
inline const std::string& SendPromptRequest::_internal_prompt() const {
  return _impl_.prompt_.Get();
}
inline void SendPromptRequest::_internal_set_prompt(const std::string& value) {
  ;


  _impl_.prompt_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPromptRequest::_internal_mutable_prompt() {
  ;
  return _impl_.prompt_.Mutable( GetArenaForAllocation());
}
inline std::string* SendPromptRequest::release_prompt() {
  // @@protoc_insertion_point(field_release:smarthome_ai_bot_api.v1.SendPromptRequest.prompt)
  return _impl_.prompt_.Release();
}
inline void SendPromptRequest::set_allocated_prompt(std::string* value) {
  _impl_.prompt_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prompt_.IsDefault()) {
          _impl_.prompt_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:smarthome_ai_bot_api.v1.SendPromptRequest.prompt)
}

// -------------------------------------------------------------------

// SendPromptResponse

// string response = 1 [json_name = "response"];
inline void SendPromptResponse::clear_response() {
  _impl_.response_.ClearToEmpty();
}
inline const std::string& SendPromptResponse::response() const {
  // @@protoc_insertion_point(field_get:smarthome_ai_bot_api.v1.SendPromptResponse.response)
  return _internal_response();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendPromptResponse::set_response(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.response_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:smarthome_ai_bot_api.v1.SendPromptResponse.response)
}
inline std::string* SendPromptResponse::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:smarthome_ai_bot_api.v1.SendPromptResponse.response)
  return _s;
}
inline const std::string& SendPromptResponse::_internal_response() const {
  return _impl_.response_.Get();
}
inline void SendPromptResponse::_internal_set_response(const std::string& value) {
  ;


  _impl_.response_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPromptResponse::_internal_mutable_response() {
  ;
  return _impl_.response_.Mutable( GetArenaForAllocation());
}
inline std::string* SendPromptResponse::release_response() {
  // @@protoc_insertion_point(field_release:smarthome_ai_bot_api.v1.SendPromptResponse.response)
  return _impl_.response_.Release();
}
inline void SendPromptResponse::set_allocated_response(std::string* value) {
  _impl_.response_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.response_.IsDefault()) {
          _impl_.response_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:smarthome_ai_bot_api.v1.SendPromptResponse.response)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace smarthome_ai_bot_api


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fserver_2eproto_2epb_2eh
